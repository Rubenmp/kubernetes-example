# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: db-<<ENVIRONMENT>> # DNS name
  labels:
    app: db-<<ENVIRONMENT>>
    tier: database
spec:
  ports:
    - port: 3306 # Database port
      targetPort: 3306 # Database port
  selector:       # mysql Pod Should contain same labels
    app: db-<<ENVIRONMENT>>
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant
---
# Define a 'Persistent Volume Claim'(PVC) for mysql Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-pv-claim-<<ENVIRONMENT>> # name of PVC essential for identifying the storage data 
  labels:
    app: db-<<ENVIRONMENT>>
    tier: database
spec:
  accessModes:
    - ReadWriteOnce # This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: <<DATABASE_STORAGE>>Gi # This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-<<ENVIRONMENT>>
  labels:
    app: db-<<ENVIRONMENT>>
    tier: database
spec:
  selector: # mysql Pod Should contain same labels 
    matchLabels:
      app: db-<<ENVIRONMENT>>
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: db-<<ENVIRONMENT>>
        tier: database
    spec:
      containers:
      - image: mysql:5.7 # Image from docker-hub
        args:
          - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
        name: db-<<ENVIRONMENT>>
        env:
        - name: MYSQL_ROOT_PASSWORD # Setting Root Password of mysql From a 'Secret'
          valueFrom:
            secretKeyRef:
              name: noq-secrets # Name of the 'Secret'
              key: databaseRootPassword   # 'key' inside the Secret which contains required 'value'
        - name: MYSQL_USER # Setting USER username on mysql from a 'Secret'
          valueFrom:
            secretKeyRef:
              name: noq-secrets
              key: databaseUser
        - name: MYSQL_PASSWORD # Setting USER Password on mysql from a 'Secret'
          valueFrom:
            secretKeyRef:
              name: noq-secrets
              key: databaseUserPassword
        - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
          valueFrom:
            configMapKeyRef:
              name: db-conf
              key: name
        ports:
        - containerPort: 3306 # Database port
          name: db-<<ENVIRONMENT>>
        volumeMounts:  # Mounting volume obtained from Persistent Volume Claim
        - name: database-persistent-storage
          mountPath: /var/lib/noq-database # This is the path in the container on which the mounting will take place.
      volumes:
      - name: database-persistent-storage # Obtaining 'volume' from PVC
        persistentVolumeClaim:
          claimName: database-pv-claim-<<ENVIRONMENT>>
